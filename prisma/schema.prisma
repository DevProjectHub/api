generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  isEmailConfirmed Boolean  @default(false)
  resetPasswordKey String?
  profile          Profile?
}

model Profile {
  id               String            @id @default(uuid())
  name             String
  photo            String?
  description      String?
  linkedin         String?
  github           String?
  discord          String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String            @unique
  projectsId       String?
  projectProfiles  ProjectProfile[]
  projects         Project[]
  jobSubscriptions JobSubscription[]
}

model ProjectProfile {
  id          String   @id @default(uuid())
  role        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String?

  @@index([projectId, profileId])
}

model JobVacancy {
  id               String            @id @default(uuid())
  description      String
  role             String
  project          Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String?
  jobSubscriptions JobSubscription[]
  requirements     Requirement[]
}

model Requirement {
  id                 String              @id @default(uuid())
  require            String
  jobVacancy         JobVacancy          @relation(fields: [jobVacancyId], references: [id], onDelete: Cascade)
  jobVacancyId       String
  RequirementAnswers RequirementAnswer[]
}

model JobSubscription {
  id                 String              @id @default(uuid())
  requirementAnswers RequirementAnswer[]
  profile            Profile?            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId          String?
  jobVacancy         JobVacancy?         @relation(fields: [jobVacancyId], references: [id], onDelete: Cascade)
  jobVacancyId       String?
}

model RequirementAnswer {
  id                String                @id @default(uuid())
  answer            RequirementAnswerEnum
  jobSubscription   JobSubscription       @relation(fields: [jobSubscriptionId], references: [id], onDelete: Cascade)
  jobSubscriptionId String
  requirements      Requirement           @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  requirementId     String

  @@index([jobSubscriptionId, requirementId])
}

model Project {
  id           String           @id @default(uuid())
  name         String           @unique
  description  String
  logo         String?
  owner        Profile?         @relation(fields: [ownerId], references: [id])
  ownerId      String?
  members      ProjectProfile[]
  jobVacancies JobVacancy[]
  updatedAt    DateTime         @updatedAt
}

enum RequirementAnswerEnum {
  INTERESSE
  CONHECO
  EXPERT
}
